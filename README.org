#+STARTUP: showall
#+STARTUP: hidestars
#+STARTUP: indent
#+PROPERTY: header-args :tangle yes :exports code

* Emacs Configuration

This is my first attempt for actual
[[http://jakob.io/literate.html][Literate Programming]].
The following org file (=~/.emacs.d/README.org=)
contains all the necessary configuration elisp code
to setup Emacs to my convenience.

To install it, check this repository out like this:

#+name: How to get emacs running
#+begin_src bash :tangle no
git clone git@github.com:holderbaum/emacs.d.git ~/.emacs.d
#+end_src

The =init.el= file will tangle and load this README
and use the tangled result as config file.

* Custom File

Emacs stores some custom settings
by default in the init file.
We want to change this
so that the custom settings
are stored inside this file

#+name: Custom variables configuration
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

* Generic Settings

There are some general setting to emacs
that will be placed under this topic.

#+name: Don't create backup (annoying.txt~) nor auto-save (#annoying.txt#)
#+begin_src emacs-lisp
;disable backup
(setq backup-inhibited t)
;disable auto save
(setq auto-save-default nil)
#+end_src

* Useful Extensions

I mostly switch between unit test and implementation.
The following shortcut aids this workflow.

#+name: Switch to the lastly active window
#+begin_src emacs-lisp
 (defun prev-window ()
   (interactive)
   (other-window -1))

 (define-key global-map (kbd "C-x p") 'prev-window)
#+end_src

* Required Packages

The packages of this installation
will be installed from the famous
[[http://melpa.org/][MELPA]] Package Repository.

To install packages from there,
the repositories URL
has to be configured:

#+name: MELPA configuration
#+begin_src emacs-lisp
(require 'package)
(setq package-user-dir "~/.emacs.d/elpa/")

(add-to-list 'package-archives
             '("melpa" .
               "http://melpa.milkbox.net/packages/"))

(package-initialize)
#+end_src

The following table
contains a list of all packages
that will be automatically installed
by this configuration on emacs boot:

#+name: packages
| Type  | Package               | Description                            |
|-------+-----------------------+----------------------------------------|
| util  | magit                 | Exceptional git integration            |
| util  | undo-tree             | Better undo visualization and handling |
| util  | helm                  | Exceptional completion system          |
| util  | helm-projectile       | helm integration with projectile       |
| util  | highlight-parentheses | Highlights lisp parantheses            |
| util  | flycheck              |                                        |
| util  | rubocop               |                                        |
| util  | rvm                   |                                        |
| util  | robe                  |                                        |
| util  | company               |                                        |
| util  | smartparens           |                                        |
| theme | solarized-theme       | A very pleasing theme                  |
| lang  | haskell-mode          | Working effectively with Haskell       |
| lang  | markdown-mode         | Needed for writing markdown            |
| lang  | feature-mode          | Needed for writing cucumber stories    |
| lang  | enh-ruby-mode         |                                        |
| lang  | inf-ruby              |                                        |
| lang  | haml-mode             | HAML, a HTML preprocessor              |

#+begin_src emacs-lisp :var package-entries=packages
(defun jakob/get-package-name (package-entry)
  (intern (cadr package-entry)))

(defun jakob/package-is-installed (package)
  (package-installed-p package))

(defun jakob/install-missing-package (package)
  "Refresh index and install given package"
  (package-refresh-contents)
  (package-install package))

(defun jakob/install-missing-packages ()
  "Install all configured packages."
  (interactive)
  (mapc #'(lambda (package-entry)
            (let
                ((package (jakob/get-package-name package-entry)))
              (unless (jakob/package-is-installed package)
                (jakob/install-missing-package package))))
        (cddr package-entries)))

(jakob/install-missing-packages)
#+end_src

* Generic Display settings

The default Emacs GUI
is rather unappealing to the modern eye.
And since the editor
is focused on keyboard shortcuts
a sophisticated GUI interface is not needed:

#+name: Disable most of the GULi elements
#+begin_src emacs-lisp
;; Turn off mouse interface early in startup to avoid momentary display
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; No splash screen please... jeez
(setq inhibit-startup-screen t)
#+end_src

A larger monospace font
is especially nice
for longer coding sessions:

#+name: Set a readable default font
#+begin_src emacs-lisp
;; Set default font
(set-default-font "DejaVu Sans Mono")
(set-face-attribute 'default nil :height 120)
#+end_src

In addition to this
the following default theme
should be used:

#+name: Load favorite theme
#+begin_src emacs-lisp
;; Load theme if installed
(require 'solarized-theme)
(load-theme 'solarized-light t)
#+end_src

* Org Mode Settings

Org mode is not only used
to build this specific file.
I also use it
for note taking
and TODO management
or small documents.

It should treat source blocks
with the actual major mode:

#+name: Display org-mode source blocks naturally
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-edit-src-content-indentation 0)
(setq org-src-tab-acts-natively t)
#+end_src

* Text Mode Settings

** Fix for DOuble CApitalization

Code segment is inspired
by this
[[http://endlessparentheses.com/fixing-double-capitals-as-you-type.html][blog post]].

#+name: Function and a minor mode to enable double capitalization errors
#+begin_src emacs-lisp
(defun dcaps-to-scaps ()
  "Convert word in DOuble CApitals to Single Capitals."
  (interactive)
  (and (= ?w (char-syntax (char-before)))
       (save-excursion
         (and (if (called-interactively-p)
                  (skip-syntax-backward "w")
                (= -3 (skip-syntax-backward "w")))
              (let (case-fold-search)
                (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
              (capitalize-word 1)))))

(define-minor-mode dubcaps-mode
  "Toggle `dubcaps-mode'. Triggers dcaps-to-scaps."
  :init-value nil
  :lighter (" DC")
  (if dubcaps-mode
      (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
    (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))
#+end_src

The mode shall be enabled
for text mode
so that it is available
to every text related buffer

#+name: Enable double capitalization mode
#+begin_src emacs-lisp
(add-hook 'text-mode-hook
          #'dubcaps-mode)
#+end_src

** Show Aiding Symbols

To simplify working
with text files and/or source code
whitespace characters and lines longer the 80 chars
should be made visible:

#+name: Enable whitespace mode for all buffers
#+begin_src emacs-lisp
(require 'whitespace)

(global-whitespace-mode)

(add-hook 'before-save-hook
          'delete-trailing-whitespace)
#+end_src


* Helm Settings

Helm is a very powerful and versatile environment
which enables nice completions everywhere.

#+name: Enable Helm globally
#+begin_src emacs-lisp
(require 'helm-projectile)
(global-set-key (kbd "C-x SPC") 'helm-projectile)
#+end_src

* Magit Settings

#+name: Configure magit status binding
#+begin_src emacs-lisp
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src

* Spell Check Settings

Spell checking will be done by the tool aspell.

#+name: Set aspell to be the default spelling tool
#+begin_src emacs-lisp
(setq ispell-program-name "aspell"
      ispell-extra-args '("--sug-mode=ultra"
                          "--run-together"
                          "--run-together-limit=5"
                          "--run-together-min=2"))
#+end_src

Because I am frequently writing in German and in English
I want a convenient function to efficiently switch between the both:

#+begin_src emacs-lisp
(let ((langs '("english" "german8")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))

(defun jakob/cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))
#+end_src

In addition I do want some convenient mappings for spell correction:

#+name: Set spell correction bindings
#+begin_src emacs-lisp
(defun jakob/spell-key-bindings ()
  (global-set-key [f6] 'jakob/cycle-ispell-languages)
  (global-set-key [f7] 'ispell-buffer))

(eval-after-load 'flyspell
  #'jakob/spell-key-bindings)
#+end_src

Finally, enable the flyspell mode

#+name: Enable spell checking for all text files
#+begin_src emacs-lisp
(add-hook 'text-mode-hook
          (lambda () (flyspell-mode 1)))
#+end_src

Spellcheck should ignore all code blocks in org mode
(as found in
[[http://endlessparentheses.com/ispell-and-org-mode.html][this post]]
):

#+name: Set spell correction skip regions
#+begin_src emacs-lisp
(defun jakob/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+begin_src" . "^#\\+end_src")))

(add-hook 'org-mode-hook
          #'jakob/org-ispell)
#+end_src

* Haskell Settings

The Haskell mode should have
activated auto-indentation:

#+name: Configure Haskell mode
#+begin_src emacs-lisp
(defun jakob/haskell-basic-configuration ()
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))

(eval-after-load 'haskell-mode #'jakob/haskell-basic-configuration)
#+end_src

* Emacs Lisp Settings

We want to highlight parantheses in elisp:

#+name: Enable parantheses highlighting for emacs lisp
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'highlight-parentheses-mode)
#+end_src

* Ruby Settings

#+begin_src emacs-lisp
(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.gemspec$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))

(require 'compile)

(setq compilation-scroll-output 'first-error)
;;(setq compilation-auto-jump-to-first-error t)

(global-set-key [(control c) (C)] 'compile)
(global-set-key [(control c) (c)] 'compile-again)
(setq compilation-last-buffer nil)
(setq compilation-read-command nil)
(defun compile-again (pfx)
  """Run the same compile as the last time.
If there was no last time, or there is a prefix argument, this acts like
M-x compile.
"""
 (interactive "p")
 (if (and (eq pfx 1)
  compilation-last-buffer)
     (progn
       (save-buffer)
       (set-buffer compilation-last-buffer)
       (revert-buffer t t))
   (call-interactively 'compile)))

(add-hook 'enh-ruby-mode-hook 'rubocop-mode)
(add-hook 'enh-ruby-mode-hook 'flycheck-mode)
(add-hook 'enh-ruby-mode-hook 'whitespace-mode)
(add-hook 'enh-ruby-mode-hook 'robe-mode)
;;(add-hook 'enh-ruby-mode-hook (lambda () (interactive) (fci-mode)))


(require 'smartparens-config)
(smartparens-global-mode)
(show-smartparens-global-mode t)

(require 'smartparens-ruby)


(require 'company)
(add-hook 'enh-ruby-mode-hook 'global-company-mode)

(eval-after-load 'company
  '(add-to-list 'company-backends 'company-inf-ruby))

(push 'company-robe company-backends)

(add-hook 'enh-ruby-mode-hook
          (lambda ()
            (rvm-activate-corresponding-ruby)

            (set (make-local-variable 'compile-command)
                 (concat "bundle exec ruby -Ilib:test:spec:test/support:spec/support:test/unit/support:test/integration/support " buffer-file-name))

            (setq-default compilation-error-regexp-alist
                          '(
                            ("\\[\\(.*\\):\\([0-9]+\\)\\]:$" 1 2)
                            ("^ *\\([[+]\\)?\\([^:]+\\):\\([0-9]+\\):in" 2 3)
                            ("^.* at \\([^:]*\\):\\([0-9]+\\)$" 1 2)))

            (set-ruby-default-directory)))


(defun set-ruby-default-directory ()
  (setq default-directory
        (file-name-directory
         (get-nearest-file '("Rakefile" "Gemfile")))))

(defun get-nearest-file (compilation-filenames)
  "Search for the compilation file traversing up the directory tree."
  (let ((dir default-directory)
        (parent-dir (file-name-directory (directory-file-name default-directory)))
        (nearest-compilation-file 'nil))
    (while (and (not (string= dir parent-dir))
                (not nearest-compilation-file))
      (dolist (filename compilation-filenames)
        (setq file-path (concat dir filename))
        (when (file-readable-p file-path)
          (setq nearest-compilation-file file-path)))
      (setq dir parent-dir
            parent-dir (file-name-directory (directory-file-name parent-dir))))
    nearest-compilation-file))
#+end_src

* Markdown Settings

Markdown is used to write exportable texts (e.g. HTML or PDF)

#+name: Configure additional markdown endings
#+begin_src emacs-lisp
(defun jakob/markdown-set-auto-mode-endings ()
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))

(eval-after-load 'markdown-mode
  #'jakob/markdown-set-auto-mode-endings)
#+end_src

#+name: Configure markdown mode
#+begin_src emacs-lisp
(defun jakob/markdown-configure ()
  (add-hook 'markdown-mode-hook 'turn-on-auto-fill))

(eval-after-load 'markdown-mode
  #'jakob/markdown-configure)
#+end_src

#  LocalWords:  DOuble CApitalization
