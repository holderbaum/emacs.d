#+STARTUP: showall 
#+STARTUP: hidestars
#+PROPERTY: header-args :tangle yes :exports code

* Emacs Configuration

This is my first attempt for actual [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]].
The following org file (=~/.emacs.d/emacs-init.org=)
contains all the necessary configuration elisp code
to setup Emacs to my convenience.

To actually load it,
add the following lines
to your =~/.emacs.d/init.el= file:

#+name: init.el content to load the literate configuration
#+begin_src emacs-lisp :tangle no
;; Require org mode
(require 'org-install)
(require 'ob-tangle)

;; Load the custom configuration file
(org-babel-load-file "emacs-init.org"
#+end_src

** Custom File

Emacs stores some custom settings
by default in the init file.
We wan't to change this
so that the custom settings
are stored inside this file

#+name: Custom variables configuration
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

** Required Packages

The packages of this installation
will be installed from the famous
[[http://melpa.org/][MELPA]] Package Repository.

To install packages from there,
the repositories URL
has to be configured:

#+name: MELPA configuration
#+begin_src emacs-lisp
(require 'package)
(setq package-user-dir "~/.emacs.d/elpa/")

(add-to-list 'package-archives
             '("melpa" .
               "http://melpa.milkbox.net/packages/"))

(package-initialize)
#+end_src

The following table
contains a list of all packages
that will be automatically installed
by this configuration on emacs boot:

#+name: packages
| Category | Package         | Description                                       |
|----------+-----------------+---------------------------------------------------|
| util     | magit           | Exceptional git integration                       |
| util     | undo-tree       | Better undo visualization and handling            |
| util     | helm            | Exceptional completion system                     |
| util     | helm-projectile | helm integration with projectile                  |
| theme    | solarized-theme | A very pleasing theme, gently to the stressed eye |

#+begin_src emacs-lisp :var package-entries=packages
(defun jakob-get-package-name (package-entry)
  (intern (cadr package-entry)))

(defun jakob-package-is-installed (package)
  (package-installed-p package))

(defun jakob-install-missing-package (package)
  (package-refresh-contents)
  (package-install package))

(defun jakob-install-missing-packages ()
  "Install all configured packages."
  (interactive)
  (mapc #'(lambda (package-entry)
            (let 
              ((package (jakob-get-package-name package-entry)))
              (unless (jakob-package-is-installed package)
                (jakob-install-missing-package package))))
        (cddr package-entries)))

(jakob-install-missing-packages)
#+end_src

To nicely configure settings
that depend on different packages,
the following macro is defined.
The idea is taken 
from this [[http://milkbox.net/note/single-file-master-emacs-configuration/][blog post]].

#+name: Configuration macro for package related stuff
#+begin_src emacs-lisp
(defmacro after (mode &rest body)
  "`eval-after-load' MODE evaluate BODY."
  (declare (indent defun))
  `(eval-after-load ,mode
     '(progn ,@body)))
#+end_src

It can be used
in two ways.
The following two code example
configure the theme
of emacs and can be used
as examples
for the =after= macro:

*** Configuration if package is installed

To execute code 
as soon as a package is installed
you can use the
=autoloads= file hook
generated by Emacs:

#+name: Example of executing code only if package is installed 
#+begin_src emacs-lisp
;; Require solarized if installed
(after "solarized-theme-autoloads"
       (require 'solarized-theme))
#+end_src

*** Configuration if package is required or autoloaded

To execute commands
only if a package was actually required
use the name of the package
as first argument to =after=:

#+name: Example of executing code only if package is required 
#+begin_src emacs-lisp
;; Define solarized light theme if solarized was required
(after "solarized-theme"
       (load-theme 'solarized-light t))
#+end_src

** Generic GUI settings

The default Emacs GUI
is rather unappealing to the modern eye.
And since the editor
is focused on keyboard shortcuts
a sophisticated GUI interface is not needed

#+name: disable most of the gui
#+begin_src emacs-lisp
;; Turn off mouse interface early in startup to avoid momentary display
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; No splash screen please... jeez
(setq inhibit-startup-screen t)

;; Set default font
(set-default-font "DejaVu Sans Mono")
(set-face-attribute 'default nil :height 120)
#+end_src



#+begin_src emacs-lisp
#+end_src

